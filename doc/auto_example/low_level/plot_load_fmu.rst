
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/low_level/plot_load_fmu.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_low_level_plot_load_fmu.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_low_level_plot_load_fmu.py:


Load an FMU
===========

.. GENERATED FROM PYTHON SOURCE LINES 12-14

First, retrieve the path to the example FMU *deviation.fmu*.


.. GENERATED FROM PYTHON SOURCE LINES 14-17

.. code-block:: default

    import otfmi.example.utility
    path_fmu = otfmi.example.utility.get_path_fmu("deviation")








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Loading an FMU only requires the FMU name or path.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    model = otfmi.fmi.load_fmu(path_fmu)








.. GENERATED FROM PYTHON SOURCE LINES 23-27

If the FMU is both ModelExchange and CoSimulation, the CoSimulation type is
favoured.
This choice, **opposite to PyFMI's default**, enables the CoSimulation
to impose a solver not available in PyFMI.

.. GENERATED FROM PYTHON SOURCE LINES 29-30

All options of `pyfmi.load_fmu` can be passed on to Otfmi:

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default

    import pyfmi
    print(help(pyfmi.load_fmu))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on built-in function load_fmu in module pyfmi.fmi:

    load_fmu(...)
        Helper method for creating a model instance.
    
        Parameters::
    
            fmu --
                Name of the fmu as a string.
    
            path [DEPRECATED] --
                This option is DEPRECATED and will be removed. Please use
                argument 'fmu' specifying path to the FMU.
                Path to the fmu-directory.
                Default: '.' (working directory)
    
            enable_logging [DEPRECATED] --
                This option is DEPRECATED and will be removed. Please use
                the option "log_level" instead.
    
            log_file_name --
                Filename for file used to save logmessages.
                This argument can also be a stream if it supports 'write', for full functionality
                it must also support 'seek' and 'readlines'. If the stream requires use of other methods, such as 'drain'
                for asyncio-streams, then this needs to be implemented on the user-side, there is no additional methods invoked
                on the stream instance after 'write' has been invoked on the PyFMI side.
                The stream must also be open and writable during the entire time.
                Default: "" (Generates automatically)
    
            kind --
                String indicating the kind of model to create. This is only
                needed if a FMU contains both a ME and CS model.
                Available options:
                    - 'ME'
                    - 'CS'
                    - 'auto'
                Default: 'auto' (Chooses ME before CS if both available)
    
            log_level --
                Determines the logging output. Can be set between 0
                (no logging) and 7 (everything).
                Default: 2 (log error messages)
            allow_unzipped_fmu --
                If set to True, the argument 'fmu' can be a path specifying a directory
                to an unzipped FMU. The structure of the unzipped FMU must conform
                to the FMI specification.
                Default: False
    
        Returns::
    
            A model instance corresponding to the loaded FMU.

    None




.. GENERATED FROM PYTHON SOURCE LINES 34-36

For instance, enforce CoSimulation kind and specify the filename for the
logs writing:

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    model = otfmi.fmi.load_fmu(path_fmu, kind="CS", log_file_name="deviation.log")








.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. note::
   Otfmi `load_fmu` is an overlay of PyFMI `load_fmu` function.
   Hence the FMU loaded here upper benefits of all PyFMI's methods.

.. GENERATED FROM PYTHON SOURCE LINES 44-46

For example, ``get_description`` is a PyFMI method (not re-implemented in
Otfmi):

.. GENERATED FROM PYTHON SOURCE LINES 46-47

.. code-block:: default

    model.get_description()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'Model from here: http://doc.openturns.org/openturns-latest/html/ExamplesGuide/cid1.xhtml#cid1'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.052 seconds)


.. _sphx_glr_download_auto_example_low_level_plot_load_fmu.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_load_fmu.py <plot_load_fmu.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_load_fmu.ipynb <plot_load_fmu.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
