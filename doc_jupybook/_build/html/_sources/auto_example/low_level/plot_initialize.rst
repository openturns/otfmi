
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/low_level/plot_initialize.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_low_level_plot_initialize.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_low_level_plot_initialize.py:


Initialize an FMU with non-default values
=========================================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

The interest of using FMUs in Python lies in the ease to change its input
/ parameter values. This notably enables to study the behavior of the FMU
with uncertain inputs / parameters.

.. GENERATED FROM PYTHON SOURCE LINES 12-16

.. note::
   | A FMU *parameter* remains constant during simulation (a single value).
   | A FMU *input* evolves during simulation (time-dependent values).
   | See the `FMI Standard <http://shorturl.at/kpJR5>`_ for more details.

.. GENERATED FROM PYTHON SOURCE LINES 18-20

First, retrieve and load the FMU *deviation.fmu*.


.. GENERATED FROM PYTHON SOURCE LINES 20-30

.. code-block:: Python

    import otfmi.example.utility
    from os.path import abspath

    path_fmu = otfmi.example.utility.get_path_fmu("deviation")
    model = otfmi.fmi.load_fmu(path_fmu)

    # check the beam default length and bending load values
    print(model.get_variable_start("L"))
    print(model.get_variable_start("F"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    250.0
    30000.0




.. GENERATED FROM PYTHON SOURCE LINES 31-33

We want to set the cantilever beam length to 300 m and the bending load to
25000 N.

.. GENERATED FROM PYTHON SOURCE LINES 35-37

Using inline argument
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 39-40

The beam length can be required directly in the ``simulate`` function:

.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: Python

    result = otfmi.fmi.simulate(model, initialization_parameters=[("L", "F"), (300, 25000)])

    # check parameters value and show output value
    print("L = %g" % result.final("L"))  # check parameter value
    print("F = %g" % result.final("F"))  # check parameter value
    print("y = %g" % result.final("y"))  # print output value





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Simulation interval    : 0.0 - 1.0 seconds.
    Elapsed simulation time: 0.011876472999574617 seconds.
    L = 300
    F = 25000
    y = 18.75




.. GENERATED FROM PYTHON SOURCE LINES 48-51

This way of doing is practical when only a few number of parameters / inputs
must be set. For larger numbers of variables to initialize, the use of scripts
is recommended.

.. GENERATED FROM PYTHON SOURCE LINES 53-55

Using initialization scripts
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-61

Initialization scripts can gather a large number of initial values.
The use of initialization scripts (*.mos* files) is common in Dymola:
- to save the value of all the variables of a model after simulation,
- to restart simulation from a given point.

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. note::
   The initialization script can be automatically created in Dymola.

.. GENERATED FROM PYTHON SOURCE LINES 67-68

For clarity, we write the initialization script using Python.

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: Python

    temporary_file = "initialization.mos"
    with open(temporary_file, "w") as f:
        f.write("L = 300;\n")
        f.write("F = 25000;\n")








.. GENERATED FROM PYTHON SOURCE LINES 74-76

Otfmi ``simulate`` function launches FMU initialization, using the
designated script, then simulates the FMU.

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: Python

    result = otfmi.fmi.simulate(model, initialization_script=abspath(temporary_file))

    # check parameters value and show output value
    print("L = %g" % result.final("L"))  # check parameter value
    print("F = %g" % result.final("F"))  # check parameter value
    print("y = %g" % result.final("y"))  # print output value




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Simulation interval    : 0.0 - 1.0 seconds.
    Elapsed simulation time: 0.010787495994009078 seconds.
    L = 300
    F = 25000
    y = 18.75





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.050 seconds)


.. _sphx_glr_download_auto_example_low_level_plot_initialize.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_initialize.ipynb <plot_initialize.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_initialize.py <plot_initialize.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_initialize.zip <plot_initialize.zip>`
