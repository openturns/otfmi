
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/static/plot_init.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_static_plot_init.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_static_plot_init.py:


Initialize FMUFunction
======================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

The interest of using FMUs in Python lies in the ease to change its input
/ parameter values. This notably enables to study the behavior of the FMU
with uncertain inputs / parameters.

.. GENERATED FROM PYTHON SOURCE LINES 12-17

Initialization scripts can gather a large number of initial values.
The use of initialization scripts (*.mos* files) is common in Dymola :

- to save the value of all the variables of a model after simulation,
- to restart simulation from a given point.

.. GENERATED FROM PYTHON SOURCE LINES 19-20

------------

.. GENERATED FROM PYTHON SOURCE LINES 22-25

First, retrieve the path to the FMU *deviation.fmu*.
Recall the deviation model is static, i.e. its output does not evolve over
time.

.. GENERATED FROM PYTHON SOURCE LINES 25-34

.. code-block:: Python

    import openturns as ot
    from os.path import abspath
    import otfmi.example.utility
    import otfmi
    import openturns.viewer as viewer

    path_fmu = otfmi.example.utility.get_path_fmu("deviation")









.. GENERATED FROM PYTHON SOURCE LINES 35-37

The initialization script must be provided to `FMUFunction` constructor.
We thus create it now (using Python for clarity).

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. note::
   The initialization script can be automatically created in Dymola.

.. GENERATED FROM PYTHON SOURCE LINES 41-47

.. code-block:: Python


    temporary_file = "initialization.mos"
    with open(temporary_file, "w") as f:
        f.write("L = 300;\n")
        f.write("F = 25000;\n")








.. GENERATED FROM PYTHON SOURCE LINES 48-50

If no initial value is provided for an input / parameter, it is set to its
default initial value (as set in the FMU).

.. GENERATED FROM PYTHON SOURCE LINES 52-55

We can now build the `FMUFunction`. In the example below, we use the
initialization script to fix the values of ``L`` and ``F`` in the FMU whereas
``E`` and ``I`` are the function variables.

.. GENERATED FROM PYTHON SOURCE LINES 55-67

.. code-block:: Python


    function = otfmi.FMUFunction(
        path_fmu,
        inputs_fmu=["E", "I"],
        outputs_fmu=["y"],
        initialization_script=abspath("initialization.mos"),
    )

    inputPoint = ot.Point([2e9, 7e7])
    outputPoint = function(inputPoint)
    print(outputPoint)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1.60714e-06]




.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. note::
   It is possible to set the value of a  model input in the
   initialization script *and* use it as a function input variable. In this
   case, the initial value from the initialization script is overriden.

.. GENERATED FROM PYTHON SOURCE LINES 74-77

For instance, we consider the 4 model parameters as variables. Note the
result is different from above, as the input point overrides the values from
the initialization script.

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: Python


    smallExampleFunction = otfmi.FMUFunction(
        path_fmu,
        inputs_fmu=["E", "F", "L", "I"],
        outputs_fmu=["y"],
        initialization_script=abspath("initialization.mos"),
    )

    inputPoint = ot.Point([2e9, 2e4, 800, 7e7])
    outputPoint = smallExampleFunction(inputPoint)
    print(outputPoint)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2.4381e-05]




.. GENERATED FROM PYTHON SOURCE LINES 90-95

Come back to the function with 2 input variables defined above.
``F`` and ``L`` initial values are defined in the initialization script, and
remain constant over time. We can now set probability laws on the function
input variables ``E`` and ``I`` to propagate their uncertainty through the
model:

.. GENERATED FROM PYTHON SOURCE LINES 95-106

.. code-block:: Python


    lawE = ot.Uniform(65e9, 75e9)
    lawI = ot.Uniform(1.3e7, 1.7e7)
    dist = ot.ComposedDistribution([lawE, lawI])
    inputSample = dist.getSample(10)

    outputSample = function(inputSample)

    graph = ot.HistogramFactory().build(outputSample).drawPDF()
    view = viewer.View(graph)
    view.ShowAll()



.. image-sg:: /auto_example/static/images/sphx_glr_plot_init_001.png
   :alt: y PDF
   :srcset: /auto_example/static/images/sphx_glr_plot_init_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.295 seconds)


.. _sphx_glr_download_auto_example_static_plot_init.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_init.ipynb <plot_init.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_init.py <plot_init.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_init.zip <plot_init.zip>`
