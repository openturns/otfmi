
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/ot_to_fmu/plot_model_exporter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_ot_to_fmu_plot_model_exporter.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_ot_to_fmu_plot_model_exporter.py:


Export a function as Modelica model
===================================

.. GENERATED FROM PYTHON SOURCE LINES 7-21

``otfmi.FunctionExporter`` enables to export OpenTURNS functions as Modelica model.
The main interest is to use OpenTURNS metamodels in a simulation environment.

Currently, the inclusion of a metamodel in
`OpenModelica GUI <https://openmodelica.org/?id=78:omconnectioneditoromedit&catid=10:main-category>`_
has been performed once (see
`this paper <https://www.researchgate.net/publication/354810878_Analysis_and_reduction_of_models_using_Persalys>`_).

------------

Model generation
++++++++++++++++

First, we create the OpenTURNS function to export as Modelica model.

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: Python


    import openturns as ot
    import otfmi
    import tempfile
    from os.path import join


    func = ot.SymbolicFunction("x", "exp(x)")
    inputPoint = [2.0]
    print(func(inputPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [7.38906]




.. GENERATED FROM PYTHON SOURCE LINES 33-34

We create the model constructor and the folder in which save the model:

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    fmuExporter = otfmi.FunctionExporter(func)

    model_path = join(tempfile.mkdtemp(), "myExponential.mo")
    print(model_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /tmp/tmpo_1bxue6/myExponential.mo




.. GENERATED FROM PYTHON SOURCE LINES 40-43

We create the FunctionExporter instance and export the exponential function.
We specify ``gui=True`` to use the model in a Modelica GUI in connection
with other components.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: Python

    modelExporter = otfmi.FunctionExporter(func)
    modelExporter.export_model(model_path, gui=True)








.. GENERATED FROM PYTHON SOURCE LINES 47-109

Simple as it looks, this function actually does the following:

- write a C-wrapper for the OpenTURNS function,
- write a Modelica model calling the C-wrapper as `External <shorturl.at/fhCU2>`_ function.

.. note::
  The export requires `CMake <https://cmake.org/>`_, a C compiler, and the
  OpenModelica compiler `OMC <https://www.openmodelica.org/?id=51:open-modelica-compiler-omccecatid=10:main-category>`_.

----------------------

Model validation
++++++++++++++++

We import this model in OpenModelica GUI. We can check the Modelica code:

.. image:: /_static/modelica_gui_code.png
   :width: 264px
   :height: 252px
   :scale: 100 %
   :alt: alternate text
   :align: center

.. note::
   The path to the C-wrapper is hard-coded in the model.

We can also check the connectors position:

.. image:: /_static/modelica_gui_interface.png
   :width: 264px
   :height: 252px
   :scale: 100 %
   :alt: alternate text
   :align: center

We connect the wrapper to an input sine signal
(*Modelica.Blocks.Sources.Sine*) and to an output block
(*Modelica.Blocks.Interfaces.RealOutput*):

.. image:: /_static/TestMyExponential.png
   :width: 264px
   :height: 252px
   :scale: 100 %
   :alt: alternate text
   :align: center

We simulate the model on 1 second, with 50 time steps. We can verify that `y`
output corresponds to the exponential of the sine signal.

.. image:: /_static/show_output.png
   :width: 264px
   :height: 252px
   :scale: 100 %
   :alt: alternate text
   :align: center

.. warning::
   ⚠️ Compared to native Modelica functions, the included OpenTURNS function is
   slow. In this case, 11 seconds of simulation were required for 50 time
   steps (i.e. 50 function calls).

Note that faster export modes are available with the "mode" keyword, depending on your setup.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.352 seconds)


.. _sphx_glr_download_auto_example_ot_to_fmu_plot_model_exporter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_model_exporter.ipynb <plot_model_exporter.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_model_exporter.py <plot_model_exporter.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_model_exporter.zip <plot_model_exporter.zip>`
